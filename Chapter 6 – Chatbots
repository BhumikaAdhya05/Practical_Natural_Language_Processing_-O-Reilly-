🎯 Objective
Understand chatbot types, architecture, NLP components, and how to build domain-specific or open-domain conversational systems.

🧩 What Are Chatbots?
Interactive systems that allow natural language interaction via text or voice.

Enable users to complete tasks (ordering, querying) or have free-form conversations.

NLP handles both understanding (NLU) and generation (NLG) of text.

🛠️ Applications
E-commerce: order placement, recommendations.

Customer service: complaint lodging, query resolution.

News & content discovery

Healthcare: symptom checkers, elder care bots.

Legal: surfacing case-related content via conversational queries.

🗂️ Taxonomy of Chatbots
FAQ Bots (Exact answer bots)

Simple Q&A retrieval from a static set.

Do not depend on prior conversation.

Flow-Based Bots

Goal-oriented.

Follow a predefined flow of questions (e.g., pizza ordering).

Open-Ended Bots

Free-form conversations.

Used in entertainment and mental wellness.

Hard to control and evaluate.

Type	Domain Goal	Example Use
FAQ Bot	Static Q&A	Amazon ML FAQs
Flow-Based Bot	Structured dialog	Food ordering
Open-Ended Bot	Chitchat, empathy	Companion bots

🧪 Pipeline of a Chatbot
Speech Recognition (optional)

NLU (Natural Language Understanding):

Intent detection (e.g., "orderPizza")

Slot filling / entity extraction (e.g., topping="cheese")

Dialog Manager:

Maintains context.

Decides what to ask next.

Response Generation:

Templates or generative models.

Speech Synthesis (optional).

🔍 Dialog Components
Intent (Dialog Act): e.g., BookFlight, CheckWeather.

Entities (Slots): e.g., date, destination.

Dialog State/Context: Tracks information across turns.

Tools: Dialogflow, Rasa NLU.

🤖 Building Bots: Platforms and Tools
1. Dialogflow
Easy-to-use cloud API.

Ideal for rule-based + flow-based bots.

Limited for handling complex, ambiguous conversations.

2. Rasa NLU
Open-source.

Allows custom ML models.

Supports interactive learning and data annotation.

📌 Advanced Topics
💬 Open-Ended Chatbots
Use seq2seq or transformer-based generation.

Hard to evaluate due to multiple valid responses.

Human-in-the-loop improves reliability by correcting output during training.

🤖 Reinforcement Learning
Helps bots learn optimal responses through feedback and long-term reward goals.

📈 Personalization Case Study
Recipe recommendation chatbot using Dialogflow + custom models.

Personalized recipe generation based on previous interactions.

⚠️ Challenges
Data scarcity: Few real-life dialog datasets.

Privacy concerns: Limitations on data sharing.

Evaluation difficulties: Open-domain bots are hard to measure.

Generative model limitations: Often produce factually incorrect outputs.

✅ Final Takeaways
Start with goal-oriented bots (e.g., FAQ or task-based).

Use cloud tools for rapid prototyping, then move to custom frameworks.

Combine rules + ML/DL for robustness.

Use feedback loops and adversarial data to improve understanding and response quality.

